Test_01. READ UNCOMMITTED

Результаты запроса баланса в первом соединении до выполнения транзакций во втором соединении (файл Test_01):
AccountID = 1, Balance = 1000
AccountID = 2, Balance = 5000

Транзакции во втором соединении:
Transaction 1, +500 to AccountID = 1
Transaction 2, -300 from AccountID = 2

Результаты запроса баланса в первом соединении после выполнения транзакций во втором соединении(файл Test_01):
AccountID = 1, Balance = 1500
AccountID = 2, Balance = 4700

Test_02. READ COMMITTED

Результаты запроса баланса в первом соединении до выполнения транзакций во втором соединении(файл Test_02):
AccountID = 1, Balance = 1000
AccountID = 2, Balance = 5000

Транзакции во втором соединении:
Transaction 1, +500 to AccountID = 1
Transaction 2, -300 from AccountID = 2

Результаты запроса баланса в первом соединении после выполнения транзакций во втором соединении(файл Test_02):
AccountID = 1, Balance = 1500
AccountID = 2, Balance = 4700

Test_03. REPEATABLE READ

Результаты запроса баланса в первом соединении до выполнения транзакций во втором соединении(файл Test_03-1):
AccountID = 1, Balance = 1000
AccountID = 2, Balance = 5000

Транзакции во втором соединении:
Transaction 1, +500 to AccountID = 1
Transaction 2, -300 from AccountID = 2

Результаты запроса баланса в первом соединении после выполнения транзакций во втором соединении (файл Test_03-1):
AccountID = 1, Balance = 1000
AccountID = 2, Balance = 5000

Результаты запроса баланса во втором соединении после выполнения в нем транзакций (файл Test_03-2):
AccountID = 1, Balance = 1500
AccountID = 2, Balance = 4700

В тестах Test_01 и Test_02 получены идентичные результаты, в первую очередь это объясняется тем, что в PostgreSQL уровень изоляции READ UNCOMMITTED не поддерживается и трактуется как READ COMMITTED. При уровне изоляции READ COMMITTED транзакции доступны все изменения в данных, происходящие в ходе ее выполнения, а также изменения (зафиксированные), внесенные в данные другими транзакциями.

В тесте Test_03 при запросе баланса в рамках одной транзакции получены одинаковые значения, до и после выполнения транзакций во втором соединении. Для уровня изоляции REPEATABLE READ транзакции доступны только те данные, которые были зафиксированы до ее начала.  Зафиксированные изменения, внесенные в данные другими транзакциями, недоступны. При запросе баланса из другого потока отображаются актуальные данные.

Думаю, что для банковских систем крайне важен порядок выполнения операций и актуальность данных во время выполнения транзакций, такое состояние данных можно обеспечить применением уровня изоляции SERIALIZABLE. При таком уровне изоляции во избежание взаимных блокировок возможно использование тайм-аутов, согласование порядка выполнения запросов, установкой приоритетов выполнения транзакций.